    // Define breakpoints
    $breakpoints: (
    small: 576px,
    medium: 768px,
    large: 992px,
    xlarge: 1200px
    );

    // Respond-to mixin
    @mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
    }

    // Define color and font functions (if not already defined)
    @function color($key) {
    $colors: (
        container: #f8f9fa,
        title: #212529,
        first: #007bff
    );
    @return map-get($colors, $key);
    }

    @function font($key) {
    $fonts: (
        small-size: 0.875rem,
        h2-size: 1.5rem
    );
    @return map-get($fonts, $key);
    }

    // Container
    .container {
    display: grid;
    place-items: center;
    margin-inline: 1.5rem;
    padding-block: 5rem;

    @include respond-to(large) {
        height: 100vh;
    }

    @include respond-to(small) {
        margin-inline: 1rem;
    }
    }

    // Card styles
    .card {
    &__container {
        display: grid;
        row-gap: 3.5rem;

        @include respond-to(medium) {
        grid-template-columns: repeat(2, 1fr);
        column-gap: 1.5rem;
        }

        @include respond-to(large) {
        grid-template-columns: repeat(3, 1fr);
        }
    }

    &__article {
        position: relative;
        overflow: hidden;

        &:hover {
        animation: remove-overflow 2s forwards;

        .card__data {
            animation: show-data 1s forwards;
            opacity: 1;
            transition: opacity 0.3s;
        }
        }

        &:not(:hover) {
        animation: show-overflow 2s forwards;

        .card__data {
            animation: remove-data 1s forwards;
        }
        }
    }

    &__img {
        width: 328px;
        border-radius: 1.5rem;

        @include respond-to(large) {
        width: 348px;
        }
    }

    &__data {
        width: 280px;
        background-color: color(container);
        padding: 1.5rem 2rem;
        box-shadow: 0 8px 24px hsla(0, 0%, 0%, 0.15);
        border-radius: 1rem;
        position: absolute;
        bottom: -9rem;
        left: 0;
        right: 0;
        margin-inline: auto;
        opacity: 0;
        transition: opacity 1s 1s;

        @include respond-to(large) {
        width: 316px;
        padding-inline: 2.5rem;
        }

        @include respond-to(small) {
        width: 250px;
        padding: 1rem;
        }
    }

    &__description {
        display: block;
        font-size: font(small-size);
        margin-bottom: 0.25rem;
    }

    &__title {
        font-size: font(h2-size);
        font-weight: 500;
        color: color(title);
        margin-bottom: 0.75rem;
    }

    &__button {
        text-decoration: none;
        font-size: font(small-size);
        font-weight: 500;
        color: color(first);

        &:hover {
        text-decoration: underline;
        }
    }
    }

    // Keyframe animations
    @keyframes show-data {
    50% {
        transform: translateY(-10rem);
    }
    100% {
        transform: translateY(-7rem);
    }
    }

    @keyframes remove-overflow {
    to {
        overflow: initial;
    }
    }

    @keyframes remove-data {
    0% {
        transform: translateY(-7rem);
    }
    50% {
        transform: translateY(-10rem);
    }
    100% {
        transform: translateY(0.5rem);
    }
    }

    @keyframes show-overflow {
    0% {
        overflow: initial;
        pointer-events: none;
    }
    50% {
        overflow: hidden;
    }
    }